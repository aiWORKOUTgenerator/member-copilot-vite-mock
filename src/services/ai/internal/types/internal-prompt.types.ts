import { FitnessLevel, WorkoutFocus, WorkoutIntensity } from '../../../../types/core';
import { ProfileData } from '../../../../components/Profile/types/profile.types';
import { PerWorkoutOptions } from '../../../../types/core';

/**
 * Internal prompt context that combines profile and workout data
 */
export interface InternalPromptContext {
  profile: {
    fitnessLevel: FitnessLevel;
    experienceLevel: string;
    primaryGoal: string;
    injuries: string[];
    preferredActivities: string[];
    availableEquipment: string[];
    availableLocations: string[];
    calculatedWorkoutIntensity?: WorkoutIntensity;
  };
  workout: {
    focus: WorkoutFocus;
    duration: number;
    energyLevel: number;
    intensity?: WorkoutIntensity;
    equipment: string[];
    areas?: string[];
    soreness?: {
      rating: number;
      areas?: string[];
    };
  };
  preferences: {
    workoutStyle: string[];
    timePreference: string;
    intensityPreference: string;
    advancedFeatures: boolean;
    aiAssistanceLevel: 'low' | 'moderate' | 'high';
  };
}

/**
 * Internal prompt variables used to generate recommendations
 */
export interface InternalPromptVariables {
  fitnessContext: {
    level: FitnessLevel;
    experience: string;
    goal: string;
    limitations: string[];
  };
  workoutContext: {
    focus: string;
    duration: number;
    energy: number;
    intensity: string;
    equipment: string[];
    targetAreas?: string[];
  };
  userPreferences: {
    style: string[];
    time: string;
    intensity: string;
    advanced: boolean;
    assistance: string;
  };
}

/**
 * Internal recommendation generated by the prompt system
 */
export interface InternalRecommendation {
  type: 'exercise' | 'intensity' | 'duration' | 'equipment' | 'focus' | 'general';
  content: string;
  confidence: number;
  context?: string;
  source: 'profile' | 'workout' | 'combined';
  priority: 'high' | 'medium' | 'low';
}

/**
 * Configuration for the internal prompt engine
 */
export interface InternalPromptConfig {
  enableDetailedAnalysis?: boolean;
  prioritizeUserPreferences?: boolean;
  safetyChecks?: boolean;
  maxRecommendations?: number;
  confidenceThreshold?: number;
  analysisTimeout?: number;
}

/**
 * Result from the internal prompt analysis
 */
export interface InternalPromptResult {
  recommendations: InternalRecommendation[];
  analysis: {
    profileScore: number;
    workoutScore: number;
    combinedScore: number;
    confidenceLevel: number;
    processingTime: number;
  };
  context: InternalPromptContext;
  variables: InternalPromptVariables;
  config: InternalPromptConfig;
}

/**
 * Error types specific to internal prompt system
 */
export type InternalPromptError = 
  | { type: 'INVALID_CONTEXT'; message: string; details?: any }
  | { type: 'ANALYSIS_FAILED'; message: string; details?: any }
  | { type: 'TIMEOUT'; message: string; details?: any }
  | { type: 'VALIDATION_ERROR'; message: string; details?: any };

/**
 * Status of the internal prompt analysis
 */
export type InternalPromptStatus = 
  | 'idle'
  | 'analyzing_profile'
  | 'analyzing_workout'
  | 'generating_recommendations'
  | 'validating'
  | 'complete'
  | 'error';

/**
 * Builders for constructing internal prompts
 */
export interface PromptBuilder {
  buildContext(data: ProfileData | PerWorkoutOptions): Partial<InternalPromptContext>;
  buildVariables(context: InternalPromptContext): InternalPromptVariables;
  validate(): boolean;
  getErrors(): string[];
}

/**
 * Strategy for generating internal recommendations
 */
export interface RecommendationStrategy {
  analyze(context: InternalPromptContext, config?: InternalPromptConfig): Promise<InternalRecommendation[]>;
  validate(recommendations: InternalRecommendation[]): boolean;
  prioritize(recommendations: InternalRecommendation[]): InternalRecommendation[];
}