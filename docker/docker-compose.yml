# Production Docker Compose Configuration
# Part of Phase 4: Production Configuration

version: '3.8'

services:
  # ===== AI SERVICE =====
  ai-service:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: production
    image: ai-service:latest
    container_name: ai-service-prod
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - LOG_LEVEL=info
      - DATABASE_URL=postgresql://aiservice:${DB_PASSWORD}@postgres:5432/aiservice
      - REDIS_URL=redis://redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=${JWT_SECRET}
      - RATE_LIMIT_WINDOW_MS=900000
      - RATE_LIMIT_MAX_REQUESTS=100
      - CACHE_TTL=3600
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
    volumes:
      - ai-logs:/app/logs
      - ai-cache:/app/cache
      - ai-tmp:/app/tmp
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - ai-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # ===== LOAD BALANCER =====
  nginx:
    image: nginx:alpine
    container_name: ai-nginx-prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    depends_on:
      - ai-service
    networks:
      - ai-network
    command: ["/bin/sh", "-c", "nginx -g 'daemon off;'"]

  # ===== DATABASE =====
  postgres:
    image: postgres:15-alpine
    container_name: ai-postgres-prod
    restart: unless-stopped
    environment:
      - POSTGRES_DB=aiservice
      - POSTGRES_USER=aiservice
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_INITDB_ARGS=--auth-host=scram-sha-256
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - ai-network
    ports:
      - "5432:5432"
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aiservice -d aiservice"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # ===== CACHE =====
  redis:
    image: redis:7-alpine
    container_name: ai-redis-prod
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - ai-network
    ports:
      - "6379:6379"
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s

  # ===== MONITORING =====
  prometheus:
    image: prom/prometheus:latest
    container_name: ai-prometheus-prod
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
      - '--web.enable-admin-api'
    networks:
      - ai-network
      - monitoring-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  grafana:
    image: grafana/grafana:latest
    container_name: ai-grafana-prod
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - monitoring-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # ===== LOG AGGREGATION =====
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.8.0
    container_name: ai-elasticsearch-prod
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    networks:
      - logging-network
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
        reservations:
          memory: 1G
          cpus: '0.5'

  kibana:
    image: docker.elastic.co/kibana/kibana:8.8.0
    container_name: ai-kibana-prod
    restart: unless-stopped
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - logging-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  logstash:
    image: docker.elastic.co/logstash/logstash:8.8.0
    container_name: ai-logstash-prod
    restart: unless-stopped
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf:ro
      - ai-logs:/var/log/app:ro
    depends_on:
      - elasticsearch
    networks:
      - logging-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # ===== BACKUP SERVICE =====
  backup:
    image: alpine:latest
    container_name: ai-backup-prod
    restart: "no"
    volumes:
      - postgres-data:/backup/postgres:ro
      - redis-data:/backup/redis:ro
      - ai-logs:/backup/logs:ro
      - backup-storage:/backup/output
      - ./scripts/backup.sh:/backup.sh:ro
    environment:
      - PGPASSWORD=${DB_PASSWORD}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - BACKUP_RETENTION_DAYS=30
      - S3_BUCKET=${BACKUP_S3_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    networks:
      - ai-network
    depends_on:
      - postgres
      - redis
    command: ["/bin/sh", "/backup.sh"]

# ===== NETWORKS =====
networks:
  ai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

  monitoring-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.21.0.0/16

  logging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.22.0.0/16

# ===== VOLUMES =====
volumes:
  # Application data
  postgres-data:
    driver: local
  redis-data:
    driver: local
  ai-logs:
    driver: local
  ai-cache:
    driver: local
  ai-tmp:
    driver: local
  nginx-logs:
    driver: local

  # Monitoring data
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

  # Logging data
  elasticsearch-data:
    driver: local

  # Backup storage
  backup-storage:
    driver: local

# ===== SECRETS =====
secrets:
  db_password:
    external: true
  redis_password:
    external: true
  jwt_secret:
    external: true
  openai_api_key:
    external: true 