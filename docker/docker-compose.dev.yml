# Development Docker Compose Configuration
# Part of Phase 4: Production Configuration

version: '3.8'

services:
  # ===== AI SERVICE (Development) =====
  ai-service-dev:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    image: ai-service:dev
    container_name: ai-service-dev
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "9229:9229"  # Debug port
    environment:
      - NODE_ENV=development
      - PORT=3000
      - LOG_LEVEL=debug
      - DATABASE_URL=postgresql://aiservice:devpassword@postgres-dev:5432/aiservice_dev
      - REDIS_URL=redis://redis-dev:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - JWT_SECRET=development-secret-key-not-for-production
      - RATE_LIMIT_WINDOW_MS=60000
      - RATE_LIMIT_MAX_REQUESTS=1000
      - CACHE_TTL=300
      - ENABLE_METRICS=true
      - METRICS_PORT=9090
      - ENABLE_DEBUG=true
      - HOT_RELOAD=true
    volumes:
      - ../src:/app/src:cached
      - ../types:/app/types:cached
      - ../__tests__:/app/__tests__:cached
      - ../package.json:/app/package.json:cached
      - ../tsconfig.json:/app/tsconfig.json:cached
      - ../jest.config.js:/app/jest.config.js:cached
      - /app/node_modules
      - ai-dev-logs:/app/logs
      - ai-dev-cache:/app/cache
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - ai-dev-network
    command: ["npm", "run", "dev"]

  # ===== DATABASE (Development) =====
  postgres-dev:
    image: postgres:15-alpine
    container_name: ai-postgres-dev
    restart: unless-stopped
    environment:
      - POSTGRES_DB=aiservice_dev
      - POSTGRES_USER=aiservice
      - POSTGRES_PASSWORD=devpassword
      - POSTGRES_INITDB_ARGS=--auth-host=md5
    volumes:
      - postgres-dev-data:/var/lib/postgresql/data
      - ./postgres/init-dev.sql:/docker-entrypoint-initdb.d/init.sql:ro
      - ./postgres/seed-dev.sql:/docker-entrypoint-initdb.d/seed.sql:ro
    networks:
      - ai-dev-network
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aiservice -d aiservice_dev"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 10s

  # ===== CACHE (Development) =====
  redis-dev:
    image: redis:7-alpine
    container_name: ai-redis-dev
    restart: unless-stopped
    command: redis-server --maxmemory 128mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-dev-data:/data
    networks:
      - ai-dev-network
    ports:
      - "6380:6379"  # Different port to avoid conflicts
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # ===== DEVELOPMENT TOOLS =====
  
  # Database Admin (pgAdmin)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: ai-pgadmin-dev
    restart: unless-stopped
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@aiservice.dev
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_LISTEN_PORT=80
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - "8080:80"
    depends_on:
      - postgres-dev
    networks:
      - ai-dev-network

  # Redis Admin (Redis Commander)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: ai-redis-commander-dev
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis-dev:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis-dev
    networks:
      - ai-dev-network

  # ===== TESTING SERVICES =====
  
  # Test Runner
  test-runner:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: testing
    image: ai-service:test
    container_name: ai-test-runner
    restart: "no"
    environment:
      - NODE_ENV=test
      - DATABASE_URL=postgresql://aiservice:devpassword@postgres-dev:5432/aiservice_test
      - REDIS_URL=redis://redis-dev:6379
      - OPENAI_API_KEY=test-key
    volumes:
      - ../src:/app/src:cached
      - ../types:/app/types:cached
      - ../__tests__:/app/__tests__:cached
      - ../coverage:/app/coverage
      - /app/node_modules
    depends_on:
      postgres-dev:
        condition: service_healthy
      redis-dev:
        condition: service_healthy
    networks:
      - ai-dev-network
    profiles:
      - testing
    command: ["npm", "run", "test:watch"]

  # Code Quality Tools
  code-quality:
    build:
      context: ..
      dockerfile: docker/Dockerfile
      target: development
    image: ai-service:dev
    container_name: ai-code-quality
    restart: "no"
    volumes:
      - ../src:/app/src:cached
      - ../types:/app/types:cached
      - ../.eslintrc.js:/app/.eslintrc.js:cached
      - ../tsconfig.json:/app/tsconfig.json:cached
      - /app/node_modules
    networks:
      - ai-dev-network
    profiles:
      - tools
    command: ["sh", "-c", "npm run lint && npm run type-check && npm run format:check"]

  # ===== DEVELOPMENT MONITORING =====
  
  # Lightweight monitoring for development
  prometheus-dev:
    image: prom/prometheus:latest
    container_name: ai-prometheus-dev
    restart: unless-stopped
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus-dev.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-dev-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=7d'
      - '--web.enable-lifecycle'
    networks:
      - ai-dev-network
      - monitoring-dev-network
    profiles:
      - monitoring

  grafana-dev:
    image: grafana/grafana:latest
    container_name: ai-grafana-dev
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_USERS_ALLOW_SIGN_UP=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - grafana-dev-data:/var/lib/grafana
      - ./monitoring/grafana-dev/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana-dev/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus-dev
    networks:
      - monitoring-dev-network
    profiles:
      - monitoring

  # ===== API DOCUMENTATION =====
  api-docs:
    image: swaggerapi/swagger-ui:latest
    container_name: ai-api-docs-dev
    restart: unless-stopped
    ports:
      - "8082:8080"
    environment:
      - SWAGGER_JSON=/docs/openapi.json
      - BASE_URL=/docs
    volumes:
      - ../docs/openapi.json:/docs/openapi.json:ro
    networks:
      - ai-dev-network
    profiles:
      - docs

  # ===== PERFORMANCE TESTING =====
  k6:
    image: grafana/k6:latest
    container_name: ai-k6-dev
    restart: "no"
    volumes:
      - ../scripts/performance:/scripts:ro
      - k6-results:/results
    networks:
      - ai-dev-network
    profiles:
      - performance
    command: ["run", "/scripts/load-test.js"]

# ===== NETWORKS =====
networks:
  ai-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/16

  monitoring-dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.31.0.0/16

# ===== VOLUMES =====
volumes:
  # Application data
  postgres-dev-data:
    driver: local
  redis-dev-data:
    driver: local
  ai-dev-logs:
    driver: local
  ai-dev-cache:
    driver: local

  # Development tools data
  pgadmin-data:
    driver: local

  # Monitoring data
  prometheus-dev-data:
    driver: local
  grafana-dev-data:
    driver: local

  # Performance testing results
  k6-results:
    driver: local

# ===== DEVELOPMENT PROFILES =====
# Use with: docker-compose --profile <profile> up
# Available profiles:
# - default: Core development services (ai-service, postgres, redis)
# - testing: Adds test runner
# - tools: Adds code quality tools
# - monitoring: Adds Prometheus and Grafana
# - docs: Adds API documentation
# - performance: Adds performance testing tools 